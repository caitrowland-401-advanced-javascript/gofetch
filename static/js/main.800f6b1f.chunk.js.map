{"version":3,"sources":["components/Results/index.js","components/Header/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Results","this","props","content","map","data","href","url","name","React","Component","Header","App","handleSubmit","e","a","setState","target","value","preventDefault","getData","fetch","state","raw","json","results","className","onChange","type","placeholder","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQAkBeA,G,uLAdP,OACI,4BACKC,KAAKC,MAAMC,QAAQC,KAAI,SAAAC,GACpB,OACI,4BACI,uBAAGC,KAAMD,EAAKE,KAAMF,EAAKG,e,GAP/BC,IAAMC,YCWbC,E,iLATP,OACI,gCACI,kD,GAJKF,IAAMC,WCmDZE,E,YA9Cb,aAAe,IAAD,8BACZ,+CAOFC,aARc,uCAQC,WAAOC,GAAP,SAAAC,EAAA,sEACP,EAAKC,SAAS,CAClBT,IAAKO,EAAEG,OAAOC,QAFH,OAIbJ,EAAEK,iBAJW,2CARD,wDAedC,QAfc,sBAeJ,8BAAAL,EAAA,sEACUM,MAAM,EAAKC,MAAMf,KAD3B,cACFgB,EADE,gBAEWA,EAAIC,OAFf,OAEFnB,EAFE,OAGR,EAAKW,SAAS,CACZS,QAASpB,EAAKoB,UAJR,2CAbR,EAAKH,MAAQ,CACXf,IAAK,KACLkB,QAAS,IAJC,E,sEAwBZ,OACE,yBAAKC,UAAU,OAEb,kBAAC,EAAD,MACA,8BACE,2BAAOC,SAAU1B,KAAKY,aAAcK,MAAOjB,KAAKqB,MAAMJ,MAAOU,KAAK,OAAOC,YAAY,uBACrF,gCACE,4BAAQX,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,YAGF,4BAAQY,QAAS7B,KAAKmB,SAAtB,gBACF,kBAAC,EAAD,CAASjB,QAASF,KAAKqB,MAAMG,e,GAzCnBhB,IAAMC,WCOJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.800f6b1f.chunk.js","sourcesContent":["import React from 'react'\n\nclass Results extends React.Component {\n    render() {\n        return (\n            <ul>\n                {this.props.content.map(data => {\n                    return (\n                        <li>\n                            <a href={data.url}>{data.name}</a>\n                        </li>\n                    )\n                })}\n            </ul>\n        )\n    }\n}\n\nexport default Results","import React from 'react'\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <header>\n                <h1>React API App</h1>\n            </header>\n        )\n    }\n\n}\n\nexport default Header","import React from 'react'\nimport './App.scss';\nimport Results from '../Results';\nimport Header from '../Header'\n\nclass App extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      url: null,\n      results: []\n    }\n  }\n\n  handleSubmit = async (e) => {\n    await this.setState({\n      url: e.target.value\n    })\n    e.preventDefault()\n  }\n\n  getData = async () => {\n    const raw = await fetch(this.state.url)\n    const data = await raw.json()\n    this.setState({\n      results: data.results\n    })\n  }\n\n  render() {\n    return (\n      <div className='App'>\n\n        <Header />\n        <form>\n          <input onChange={this.handleSubmit} value={this.state.value} type=\"text\" placeholder='Input API URL here' />\n          <select>\n            <option value=\"get\">GET</option>\n            <option value=\"put\">PUT</option>\n            <option value=\"patch\">PATCH</option>\n            <option value=\"post\">POST</option>\n            <option value=\"delete\">DELETE</option>\n          </select>\n        </form>\n          <button onClick={this.getData}> Get Results</button>\n        <Results content={this.state.results} />\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n// import './index.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}